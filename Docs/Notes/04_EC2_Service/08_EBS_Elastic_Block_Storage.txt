*) Elastic Block Storage (EBS):
    -> https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html

    *) Storage area network:
        -> './images/02_Storage_Area_Network.jpg'
        -> you can share the disk(storage) over the network using Storage area network.
        -> If you want to use some storage from the cloud to the client machine in that case we will just mount that storage and we can use it. and it will happen over the network.
        -> So, The disk that we create over the network which is called as EBS in aws.

    -> So every time we will create the instance we will attach the EBS volume to that instance.
        -> https://ap-south-1.console.aws.amazon.com/ec2/home?region=ap-south-1#Volumes:
    -> And this volume that get attached is through the network and it is called as EBS on aws.
    -> Because EBS happen over the network because of the we have face small latency somewhere around in ms.
    -> Also we can attach Multiple EBS on the same instance.
    -> And if you delete the instance on you choice you can only delete the instance and Volume will not get deleted and you can use that volume to access history of data that you have stored.
    -> There are multiple types of EBS volume where some single volume can get attach to multiple instances and some single volume can only be able to attach to one instance.
    -> Whenever we create the EBS volume it will get created on Availability zone so we can only attach those instance which are under the same Availability zone. But you can be able to access different Availability zone EBS volume to different Availability zone instance using Snapshot.
    -> You can Increase EBS volume size as well on running EBS.
    *) Different types of EBS volumes:
        1. io1, io2:
            -> this volume can get attach to multiple instances.
    
    -> We use EBS for data persistent.

    -> Whenever we will create the EBS volume aws will by default create the same replica on same Availability zone. so, if by mistake the original EBS volume get deleted on that case also aws will provide the EBS volume.

    *) Practical Demo:
        -> Let's create EBS volume: https://ap-south-1.console.aws.amazon.com/ec2/home?region=ap-south-1#Volumes:
        -> Let's create 2 EBS volume on same region but different Availability zone: ex 'ap-south-1a', 'ap-south-1b'
        -> Now let's EC2 create Instance on 'ap-south-1a' for that you have to click on 'Edit' button on Network section under that we can find 'Subnet'
        -> Let's add the volume on Instance:
            ->  But by default aws will create Root Volume where OS lives where on windows case it will be 'C:\' and on linux '/'
            ->  and now you can attach other Volume as well.
            -> when we will create the Instance The amount of volume that we add while creating the Instance, all those volume will also get added to EBS
        -> Now we can check all the disk that are attach on the instance using command 'lsblk'.
        -> Now Let's try to attach the Volume that you have created outside of creating Instance:
            -> we can go to volumes section and on 'Action' button we can click on Attach Volume button.
            -> we have created to volumes under different Availability zone:
                1. ap-south-1b: we can't attach 'ap-south-1b' volume on 'ap-south-1a' instance
                2. ap-south-1a: but this volume can be able to get attached to 'ap-south-1a' instance.
        -> If if we will use command 'lsblk' command we can see that we have attached the new Disk
        -> We can again detach the attached volume.
        *) How to use those attached volumes:
            -> Create Volume using command: mkfs.ext4 /dev/<disk_name>
            -> you can get disk name using 'lsblk'
            -> Make directory where you can mount:
                -> mkdir '/test-drive'
            -> Mount that volume on folder '/test-drive':
                -> sudo mount /dev/<disk_name> /test-drive/
                -> mountpoint /test-drive/
            -> Now let's create some files:
                -> cd /test-drive/
                -> sudo vim hello.text
            -> Now let's unmount that disk:
                -> sudo umount /test/
            -> Now we can detach that volume as well.
        
        -> NOTE whenever you will restart the instance all the mounted volumes will get automatically unmounted, Todo: find a way to automatically get attached those volumes when get restarted
        

        *) detach and attach volume on another instance:
            -> first attach it to another instance
            -> But we can't perform 'mkfs.ext4 /dev/<disk_name>' command because this will format the disk
            -> So,to check whether the newly attached EBS volume have the data or not for that we can run this command:
                -> sudo file -s /dev/<disk_name>
                    -> If you get some kind of 'ext4 filesystem data, UUID=<uuid>' output it means that it contain the data
                    -> And if it only got '/dev/<disk_name>: data' then it doesn't have data
            -> So if it have the data then we will just going to mount that disk:
                -> Make directory where you can mount:
                    -> mkdir '/test-drive'
                -> Mount that volume on folder '/test-drive':
                    -> sudo mount /dev/<disk_name> /test-drive/
                    
        
        *) Extend EBS Size:
            -> To Extend Block storage we can just go to: https://ap-south-1.console.aws.amazon.com/ec2/home?region=ap-south-1#Volumes:
            -> And then modify the size, NOTE that you can only Increase the size.
            -> Now to We have just increase the Block Storage and the increased block storage will be by default in unused.
            -> so if we will run 'lsblk' we will see the increased size but just by increasing won't going to increase the Filesystem size.
            -> If we will run:
                -> df -h
                    -> we will see that the size of file system is still the previous filesystem size.
            -> To Increase the Filesystem size of that Block storage on instance:
                -> sudo resize2fs /dev/<file_system_name>


        *) Way to decrease EBS volume size:
            -> We can't decrease EBS volume size, AWS don't allow that.
            -> But we can do another way:
                -> First we will create new EBS volume of desired size.
                -> Then copy all the data from the previous volume to new volume.
                -> Then Unmount the previous Volume.
                -> And then mount the new volume on the same location.

        *) How to Resize ROOT EBS Volume:
            -> First we will modify the volume through AWS: https://ap-south-1.console.aws.amazon.com/ec2/home?region=ap-south-1#Volumes:
            -> now if we will run 'lsblk' command on instance then:
                loop7      7:7    0  40.8M  1 loop /snap/snapd/20092
                xvda     202:0    0    16G  0 disk 
                ├─xvda1  202:1    0   7.9G  0 part /
                ├─xvda14 202:14   0     4M  0 part 
                └─xvda15 202:15   0   106M  0 part /boot/efi
                -> Here we can see that 'xvda' block have three increase from 8GB to 16GB
                -> and it have 3 partition where 'xvda1' is not '/' which is the main partition where OS exist and the size of xvda1 is 7.9GB size.
            -> So firstly we will going to check which filesystem is 'xvda1' is:
                -> sudo file -s /dev/xvda1
                    /dev/xvda1: Linux rev 1.0 ext4 filesystem data, UUID=4513eb34-58e6-408e-8ed7-3d487fe6b35b, volume name "cloudimg-rootfs" (needs journal recovery) (extents) (64bit) (large files)
                    -> (here we can see that it is ext4 filesystem)
            -> we can increase the size of the filesystem
            -> Firstly we will increase the partition:
                -> growpart /dev/<block_name> <partition_number>
                    -> For now: growpart /dev/xvda 1
            -> now if we will run 'lsblk' command then:
                loop7      7:7    0  40.8M  1 loop /snap/snapd/20092
                xvda     202:0    0    16G  0 disk 
                ├─xvda1  202:1    0  15.9G  0 part /
                ├─xvda14 202:14   0     4M  0 part 
                └─xvda15 202:15   0   106M  0 part /boot/efi
                -> (here we can see that it's size got increased)
            -> now we will run 'df -h' command:
                Filesystem      Size  Used Avail Use% Mounted on
                /dev/root       7.6G  2.1G  5.6G  27% /
                tmpfs           483M     0  483M   0% /dev/shm
                -> (here we can see that Filesystem size is still haven't increased)
            -> To increase the Filesystem now we will run:
                -> sudo resize2fs /dev/xvda1
            -> Not we have successfully increase the Size of Root Volume.

            -> NOTE: currently the filesystem is 'ext4' but if we will have 'xfs' file system then to increase the filesystem of 'xfs' we have to run this command 'xfs_growfs'